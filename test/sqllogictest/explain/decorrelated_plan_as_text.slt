# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t (
  a int,
  b int
)

statement ok
CREATE VIEW ov AS SELECT * FROM t ORDER BY b asc, a desc LIMIT 5

statement ok
CREATE VIEW v AS
SELECT * FROM t WHERE a IS NOT NULL

statement ok
CREATE DEFAULT INDEX ON v

statement ok
CREATE MATERIALIZED VIEW mv AS
SELECT * FROM t WHERE a IS NOT NULL

mode cockroach

# Test constant error.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT 1 / 0
----
Return
  Project (#0)
  Map ((1 / 0))
  Get l1
With
  cte l1 =
    CrossJoin
      Get l0
      Constant
        - ()
  cte l0 =
    Constant
      - ()

EOF

# Test constant with two elements.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
(SELECT 1, 2) UNION ALL (SELECT 1, 2) UNION ALL (SELECT 3, 4)
----
Return
  Union
    Get l8
    Get l11
With
  cte l11 =
    Project (#2, #3)
    Project (#0..=#3)
    Map (#1)
    Map (#0)
    Get l10
  cte l10 =
    Project (#0, #1)
    Map (4)
    Map (3)
    Get l9
  cte l9 =
    CrossJoin
      Get l0
      Constant
        - ()
  cte l8 =
    Project (#2, #3)
    Project (#0..=#3)
    Map (#1)
    Map (#0)
    Get l7
  cte l7 =
    Union
      Get l3
      Get l6
  cte l6 =
    Project (#2, #3)
    Project (#0..=#3)
    Map (#1)
    Map (#0)
    Get l5
  cte l5 =
    Project (#0, #1)
    Map (2)
    Map (1)
    Get l4
  cte l4 =
    CrossJoin
      Get l0
      Constant
        - ()
  cte l3 =
    Project (#2, #3)
    Project (#0..=#3)
    Map (#1)
    Map (#0)
    Get l2
  cte l2 =
    Project (#0, #1)
    Map (2)
    Map (1)
    Get l1
  cte l1 =
    CrossJoin
      Get l0
      Constant
        - ()
  cte l0 =
    Constant
      - ()

EOF

# Test basic linear chains.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT 1, a + b as c FROM mv WHERE a > 0 and b < 0 and a + b > 0
----
Return
  Project (#2, #3)
  Project (#0..=#3)
  Map ((#0 + #1))
  Map (1)
  Get l1
With
  cte l1 =
    Filter (((#0 > 0) AND (#1 < 0)) AND ((#0 + #1) > 0))
    CrossJoin
      Get l0
      Get materialize.public.mv
  cte l0 =
    Constant
      - ()

EOF

# Test table functions in the select clause (FlatMap).
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT generate_series(a, b) from t
----
Return
  Project (#2)
  Filter true
  FlatMap generate_series(#0, #1, 1)
  Get l1
With
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test Threshold, Union, Distinct, Negate.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT a FROM t EXCEPT SELECT b FROM mv
----
Return
  Threshold
  Union
    Get l2
    Get l4
With
  cte l4 =
    Negate
    Distinct group_by=[#0]
    Project (#1)
    Project (#0, #1)
    Map (#0)
    Get l3
  cte l3 =
    Project (#1)
    CrossJoin
      Get l0
      Get materialize.public.mv
  cte l2 =
    Distinct group_by=[#0]
    Project (#1)
    Project (#0, #1)
    Map (#0)
    Get l1
  cte l1 =
    Project (#0)
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test Threshold, Union, Distinct, Negate.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT a FROM t EXCEPT ALL SELECT b FROM mv
----
Return
  Threshold
  Union
    Get l2
    Get l4
With
  cte l4 =
    Negate
    Project (#1)
    Project (#0, #1)
    Map (#0)
    Get l3
  cte l3 =
    Project (#1)
    CrossJoin
      Get l0
      Get materialize.public.mv
  cte l2 =
    Project (#1)
    Project (#0, #1)
    Map (#0)
    Get l1
  cte l1 =
    Project (#0)
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test TopK.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
VIEW ov
----
Return
  Project (#0, #1)
  TopK order_by=[#1 asc nulls_last, #0 desc nulls_first] limit=5 monotonic=false
  CrossJoin
    Get l0
    Get materialize.public.t
With
  cte l0 =
    Constant
      - ()

EOF

# Test Finish.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT * FROM t ORDER BY b asc, a desc LIMIT 5
----
Finish order_by=[#1 asc nulls_last, #0 desc nulls_first] limit=5 output=[#0, #1]
  Return
    CrossJoin
      Get l0
      Get materialize.public.t
  With
    cte l0 =
      Constant
        - ()

EOF

# Test Reduce (global).
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT abs(min(a) - max(a)) FROM t
----
Return
  Project (#2)
  Project (#0..=#2)
  Map (abs((#0 - #1)))
  Get l7
With
  cte l7 =
    Union
      Get l1
      Get l6
  cte l6 =
    CrossJoin
      Get l5
      Constant
        - (null, null)
  cte l5 =
    Project ()
    CrossJoin
      Get l4
      Get l0
  cte l4 =
    Union
      Get l2
      Get l3
  cte l3 =
    Distinct
    Get l0
  cte l2 =
    Negate
    Distinct
    Get l1
  cte l1 =
    Reduce aggregates=[min(#0), max(#0)]
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test Reduce (local).
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT abs(min(a) - max(a)) FROM t GROUP BY b
----
Return
  Project (#3)
  Project (#0..=#3)
  Map (abs((#1 - #2)))
  Get l2
With
  cte l2 =
    Reduce group_by=[#2] aggregates=[min(#0), max(#0)]
    Project (#0..=#2)
    Map (#1)
    Get l1
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test EXISTS subqueries.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT * FROM t WHERE EXISTS(SELECT * FROM mv WHERE t.a < mv.a) AND EXISTS(SELECT * FROM mv WHERE t.b > mv.b)
----
Return
  Project (#0, #1)
  Filter #2
  Project (#0, #1, #3)
  Join on=(#1 = #2)
    Get l11
    Get l20
With
  cte l20 =
    Union
      Get l14
      Get l19
  cte l19 =
    CrossJoin
      Get l18
      Constant
        - (false)
  cte l18 =
    Project (#0)
    Join on=(#0 = #1)
      Get l17
      Get l12
  cte l17 =
    Union
      Get l15
      Get l16
  cte l16 =
    Distinct group_by=[#0]
    Get l12
  cte l15 =
    Negate
    Distinct group_by=[#0]
    Get l14
  cte l14 =
    CrossJoin
      Get l13
      Constant
        - (true)
  cte l13 =
    Distinct group_by=[#0]
    Filter (#0 > #2)
    CrossJoin
      Get l12
      Get materialize.public.mv
  cte l12 =
    Distinct group_by=[#1]
    Get l11
  cte l11 =
    Project (#0, #1)
    Filter #2
    Project (#0, #1, #3)
    Join on=(#0 = #2)
      Get l1
      Get l10
  cte l10 =
    Union
      Get l4
      Get l9
  cte l9 =
    CrossJoin
      Get l8
      Constant
        - (false)
  cte l8 =
    Project (#0)
    Join on=(#0 = #1)
      Get l7
      Get l2
  cte l7 =
    Union
      Get l5
      Get l6
  cte l6 =
    Distinct group_by=[#0]
    Get l2
  cte l5 =
    Negate
    Distinct group_by=[#0]
    Get l4
  cte l4 =
    CrossJoin
      Get l3
      Constant
        - (true)
  cte l3 =
    Distinct group_by=[#0]
    Filter (#0 < #1)
    CrossJoin
      Get l2
      Get materialize.public.mv
  cte l2 =
    Distinct group_by=[#0]
    Get l1
  cte l1 =
    Filter (true AND true)
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test SELECT subqueries.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT (SELECT v.a FROM v WHERE v.b = t.b LIMIT 1), (SELECT mv.a FROM mv WHERE mv.b = t.b LIMIT 1) FROM t
----
Return
  Project (#2, #3)
  Project (#0, #1, #8, #9)
  Map (#7)
  Map (#4)
  Join on=(eq(#0, #2, #5) AND eq(#1, #3, #6))
    Get l1
    Get l13
    Get l25
With
  cte l25 =
    Project (#0, #1, #3)
    Join on=(#1 = #2)
      Get l14
      Get l24
  cte l24 =
    Union
      Get l18
      Get l23
  cte l23 =
    CrossJoin
      Get l22
      Constant
        - (null)
  cte l22 =
    Project (#0)
    Join on=(#0 = #1)
      Get l21
      Get l15
  cte l21 =
    Union
      Get l19
      Get l20
  cte l20 =
    Distinct group_by=[#0]
    Get l15
  cte l19 =
    Negate
    Distinct group_by=[#0]
    Get l18
  cte l18 =
    Union
      Get l16
      Get l17
  cte l17 =
    Map (error("more than one record produced in subquery"))
    Project (#0)
    Filter (#1 > 1)
    Reduce group_by=[#0] aggregates=[count(true)]
    Get l16
  cte l16 =
    Project (#0, #1)
    TopK group_by=[#0] limit=1 monotonic=false
    Filter (#2 = #0)
    CrossJoin
      Get l15
      Get materialize.public.mv
  cte l15 =
    Distinct group_by=[#1]
    Get l14
  cte l14 =
    Distinct group_by=[#0, #1]
    Get l1
  cte l13 =
    Project (#0, #1, #3)
    Join on=(#1 = #2)
      Get l2
      Get l12
  cte l12 =
    Union
      Get l6
      Get l11
  cte l11 =
    CrossJoin
      Get l10
      Constant
        - (null)
  cte l10 =
    Project (#0)
    Join on=(#0 = #1)
      Get l9
      Get l3
  cte l9 =
    Union
      Get l7
      Get l8
  cte l8 =
    Distinct group_by=[#0]
    Get l3
  cte l7 =
    Negate
    Distinct group_by=[#0]
    Get l6
  cte l6 =
    Union
      Get l4
      Get l5
  cte l5 =
    Map (error("more than one record produced in subquery"))
    Project (#0)
    Filter (#1 > 1)
    Reduce group_by=[#0] aggregates=[count(true)]
    Get l4
  cte l4 =
    Project (#0, #1)
    TopK group_by=[#0] limit=1 monotonic=false
    Filter (#2 = #0)
    CrossJoin
      Get l3
      Get materialize.public.v
  cte l3 =
    Distinct group_by=[#1]
    Get l2
  cte l2 =
    Distinct group_by=[#0, #1]
    Get l1
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test CrossJoin derived from a comma join without a predicate.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT t1.a, t2.a FROM t as t1, t as t2
----
Return
  Project (#0, #2)
  Get l3
With
  cte l3 =
    Filter true
    Project (#0..=#3)
    CrossJoin
      Get l1
      Get l2
  cte l2 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test CrossJoin derived from an INNER JOIN with a trivial ON clause.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT t1.a, t2.a FROM t as t1 INNER JOIN t as t2 ON true
----
Return
  Project (#0, #2)
  Get l3
With
  cte l3 =
    Filter true
    Project (#0..=#3)
    CrossJoin
      Get l1
      Get l2
  cte l2 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test InnerJoin (comma syntax).
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM
  t as t1,
  t as t2,
  t as t3
WHERE t1.b = t2.b AND t2.b = t3.b
----
Return
  Project (#0, #2)
  Filter ((#1 = #3) AND (#3 = #5))
  Get l6
With
  cte l6 =
    Filter true
    Project (#0..=#5)
    CrossJoin
      Get l4
      Get l5
  cte l5 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l4 =
    Get l3
  cte l3 =
    Filter true
    Project (#0..=#3)
    CrossJoin
      Get l1
      Get l2
  cte l2 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM t as t1
INNER JOIN t as t2 ON t1.b = t2.b
INNER JOIN t as t3 ON t2.b = t3.b
----
Return
  Project (#0, #2)
  Get l6
With
  cte l6 =
    Filter (#3 = #5)
    Project (#0..=#5)
    CrossJoin
      Get l4
      Get l5
  cte l5 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l4 =
    Get l3
  cte l3 =
    Filter (#1 = #3)
    Project (#0..=#3)
    CrossJoin
      Get l1
      Get l2
  cte l2 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM t as t1
LEFT JOIN t as t2 ON t1.b = t2.b
RIGHT JOIN t as t3 ON t2.b = t3.b
----
Return
  Project (#0, #2)
  Union
    Get l12
    Get l9
With
  cte l12 =
    Project (#2..=#5, #0, #1)
    Map (null, null, null, null)
    Union
      Get l11
      Get l8
  cte l11 =
    Negate
    Project (#0, #1)
    Join on=(#1 = #2)
      Get l8
      Get l10
  cte l10 =
    Distinct group_by=[#0]
    Project (#3)
    Get l9
  cte l9 =
    Filter (#3 = #5)
    Project (#0..=#5)
    CrossJoin
      Get l7
      Get l8
  cte l8 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l7 =
    Union
      Get l6
      Get l3
  cte l6 =
    Map (null, null)
    Union
      Get l5
      Get l1
  cte l5 =
    Negate
    Project (#0, #1)
    Join on=(#1 = #2)
      Get l1
      Get l4
  cte l4 =
    Distinct group_by=[#0]
    Project (#1)
    Get l3
  cte l3 =
    Filter (#1 = #3)
    Project (#0..=#3)
    CrossJoin
      Get l1
      Get l2
  cte l2 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test a single CTE.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
WITH x AS (SELECT t.a * t.b as v from t) SELECT a.v + b.v FROM x as a, x as b
----
Return
  Project (#2)
  Project (#0..=#2)
  Map ((#0 + #1))
  Get l4
With
  cte l4 =
    Get l3
  cte l3 =
    Filter true
    Project (#0, #1)
    CrossJoin
      Get l2
      Get l2
  cte l2 =
    Project (#2)
    Project (#0..=#2)
    Map ((#0 * #1))
    Get l1
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up through
# the join because the local l0 is correlated against the lhs of the enclosing join.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r2 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r2 WHERE r2.m != r1.a
  ) as r3
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r4 WHERE r4.m != r1.a OR (r4.m IS NOT NULL AND r1.a IS NULL)
  ) as r5;
----
Return
  Filter true
  Project (#0..=#2, #4)
  Join on=(#0 = #3)
    Get l11
    Get l20
With
  cte l20 =
    Filter ((#1 != #0) OR ((#1) IS NOT NULL AND (#0) IS NULL))
    Get l19
  cte l19 =
    Union
      Get l13
      Get l18
  cte l18 =
    CrossJoin
      Get l17
      Constant
        - (null)
  cte l17 =
    Project (#0)
    Join on=(#0 = #1)
      Get l16
      Get l12
  cte l16 =
    Union
      Get l14
      Get l15
  cte l15 =
    Distinct group_by=[#0]
    Get l12
  cte l14 =
    Negate
    Distinct group_by=[#0]
    Get l13
  cte l13 =
    Reduce group_by=[#0] aggregates=[max((#0 * #1))]
    CrossJoin
      Get l12
      Get materialize.public.t
  cte l12 =
    Distinct group_by=[#0]
    Get l11
  cte l11 =
    Filter true
    Project (#0, #1, #3)
    Join on=(#0 = #2)
      Get l1
      Get l10
  cte l10 =
    Filter (#1 != #0)
    Get l9
  cte l9 =
    Union
      Get l3
      Get l8
  cte l8 =
    CrossJoin
      Get l7
      Constant
        - (null)
  cte l7 =
    Project (#0)
    Join on=(#0 = #1)
      Get l6
      Get l2
  cte l6 =
    Union
      Get l4
      Get l5
  cte l5 =
    Distinct group_by=[#0]
    Get l2
  cte l4 =
    Negate
    Distinct group_by=[#0]
    Get l3
  cte l3 =
    Reduce group_by=[#0] aggregates=[max((#0 * #1))]
    CrossJoin
      Get l2
      Get materialize.public.t
  cte l2 =
    Distinct group_by=[#0]
    Get l1
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up
# through the join because the local l0 is correlated against the lhs of
# the enclosing join.
query T multiline
EXPLAIN DECORRELATED PLAN AS TEXT FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT *
    FROM
      r4
      CROSS JOIN LATERAL (
        WITH r2 as (
          SELECT MAX(r1.a * t.a) AS m FROM t
        )
        SELECT * FROM r2 WHERE r1.a = r4.m AND r2.m > 5
      ) as r3
    WHERE a != r1.a
  ) as r5;
----
Return
  Filter true
  Project (#0, #1, #3, #4)
  Join on=(#0 = #2)
    Get l1
    Get l19
With
  cte l19 =
    Filter (#0 != #0)
    Filter true
    Project (#0, #1, #4)
    Join on=(#1 = #2 AND #0 = #3)
      Get l9
      Get l18
  cte l18 =
    Filter ((#1 = #0) AND (#2 > 5))
    Get l17
  cte l17 =
    Union
      Get l11
      Get l16
  cte l16 =
    CrossJoin
      Get l15
      Constant
        - (null)
  cte l15 =
    Project (#0, #1)
    Join on=(#0 = #2 AND #1 = #3)
      Get l14
      Get l10
  cte l14 =
    Union
      Get l12
      Get l13
  cte l13 =
    Distinct group_by=[#0, #1]
    Get l10
  cte l12 =
    Negate
    Distinct group_by=[#0, #1]
    Get l11
  cte l11 =
    Reduce group_by=[#0, #1] aggregates=[max((#1 * #2))]
    CrossJoin
      Get l10
      Get materialize.public.t
  cte l10 =
    Distinct group_by=[#1, #0]
    Get l9
  cte l9 =
    Union
      Get l3
      Get l8
  cte l8 =
    CrossJoin
      Get l7
      Constant
        - (null)
  cte l7 =
    Project (#0)
    Join on=(#0 = #1)
      Get l6
      Get l2
  cte l6 =
    Union
      Get l4
      Get l5
  cte l5 =
    Distinct group_by=[#0]
    Get l2
  cte l4 =
    Negate
    Distinct group_by=[#0]
    Get l3
  cte l3 =
    Reduce group_by=[#0] aggregates=[max((#0 * #1))]
    CrossJoin
      Get l2
      Get materialize.public.t
  cte l2 =
    Distinct group_by=[#0]
    Get l1
  cte l1 =
    CrossJoin
      Get l0
      Get materialize.public.t
  cte l0 =
    Constant
      - ()

EOF
