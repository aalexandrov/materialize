# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t (
  a int,
  b int
)

statement ok
CREATE VIEW ov AS SELECT * FROM t ORDER BY b asc, a desc LIMIT 5

statement ok
CREATE VIEW v AS
SELECT * FROM t WHERE a IS NOT NULL

statement ok
CREATE DEFAULT INDEX ON v

statement ok
CREATE MATERIALIZED VIEW mv AS
SELECT * FROM t WHERE a IS NOT NULL

mode cockroach

# Test constant error.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT 1 / 0
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get %2 (l1)
| Map (1 / 0)
| Project (#0)

EOF

# Test constant with two elements.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
(SELECT 1, 2) UNION ALL (SELECT 1, 2) UNION ALL (SELECT 3, 4)
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 = Let l2 =
| Get %2 (l1)
| Map 1
| Map 2
| Project (#0, #1)

%4 =
| Get %3 (l2)
| Map #0
| Map #1
| Project (#0..=#3)
| Project (#2, #3)

%5 =
| Constant ()

%6 = Let l3 =
| Join %0 %5
| | implementation = Unimplemented

%7 = Let l4 =
| Get %6 (l3)
| Map 1
| Map 2
| Project (#0, #1)

%8 =
| Get %7 (l4)
| Map #0
| Map #1
| Project (#0..=#3)
| Project (#2, #3)

%9 = Let l5 =
| Union %4 %8

%10 =
| Get %9 (l5)
| Map #0
| Map #1
| Project (#0..=#3)
| Project (#2, #3)

%11 =
| Constant ()

%12 = Let l6 =
| Join %0 %11
| | implementation = Unimplemented

%13 = Let l7 =
| Get %12 (l6)
| Map 3
| Map 4
| Project (#0, #1)

%14 =
| Get %13 (l7)
| Map #0
| Map #1
| Project (#0..=#3)
| Project (#2, #3)

%15 =
| Union %10 %14

EOF

# Test basic linear chains.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT 1, a + b as c FROM mv WHERE a > 0 and b < 0 and a + b > 0
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.mv (u5)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented
| Filter (((#0 > 0) AND (#1 < 0)) AND ((#0 + #1) > 0))

%3 =
| Get %2 (l1)
| Map 1
| Map (#0 + #1)
| Project (#0..=#3)
| Project (#2, #3)

EOF

# Test table functions in the select clause (FlatMap).
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT generate_series(a, b) from t
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get %2 (l1)
| FlatMap generate_series(#0, #1, 1)
| Filter true
| Project (#2)

EOF

# Test Threshold, Union, Distinct, Negate.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT a FROM t EXCEPT SELECT b FROM mv
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented
| Project (#0)

%3 =
| Get %2 (l1)
| Map #0
| Project (#0, #1)
| Project (#1)
| Distinct group=(#0)

%4 =
| Get materialize.public.mv (u5)

%5 = Let l2 =
| Join %0 %4
| | implementation = Unimplemented
| Project (#1)

%6 =
| Get %5 (l2)
| Map #0
| Project (#0, #1)
| Project (#1)
| Distinct group=(#0)
| Negate

%7 =
| Union %3 %6
| Threshold

EOF

# Test Threshold, Union, Distinct, Negate.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT a FROM t EXCEPT ALL SELECT b FROM mv
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented
| Project (#0)

%3 =
| Get %2 (l1)
| Map #0
| Project (#0, #1)
| Project (#1)

%4 =
| Get materialize.public.mv (u5)

%5 = Let l2 =
| Join %0 %4
| | implementation = Unimplemented
| Project (#1)

%6 =
| Get %5 (l2)
| Map #0
| Project (#0, #1)
| Project (#1)
| Negate

%7 =
| Union %3 %6
| Threshold

EOF

# Test TopK.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
VIEW ov
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 =
| Join %0 %1
| | implementation = Unimplemented
| TopK group=() order=(#1 asc nulls_last, #0 desc nulls_first) limit=5 offset=0
| Project (#0, #1)

EOF

# Test Finish.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT * FROM t ORDER BY b asc, a desc LIMIT 5
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 =
| Join %0 %1
| | implementation = Unimplemented

Finish order_by=(#1 asc nulls_last, #0 desc nulls_first) limit=5 offset=0 project=(#0, #1)

EOF

# Test Reduce (global).
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT abs(min(a) - max(a)) FROM t
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented
| Reduce group=()
| | agg min(#0)
| | agg max(#0)

%3 =
| Get %2 (l1)
| Distinct group=()
| Negate

%4 =
| Get %0 (l0)
| Distinct group=()

%5 =
| Union %3 %4

%6 =
| Join %5 %0
| | implementation = Unimplemented
| Project ()

%7 =
| Constant (null, null)

%8 =
| Join %6 %7
| | implementation = Unimplemented

%9 = Let l2 =
| Union %2 %8

%10 =
| Get %9 (l2)
| Map abs((#0 - #1))
| Project (#0..=#2)
| Project (#2)

EOF

# Test Reduce (local).
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT abs(min(a) - max(a)) FROM t GROUP BY b
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 = Let l2 =
| Get %2 (l1)
| Map #1
| Project (#0..=#2)
| Reduce group=(#2)
| | agg min(#0)
| | agg max(#0)

%4 =
| Get %3 (l2)
| Map abs((#1 - #2))
| Project (#0..=#3)
| Project (#3)

EOF

# Test EXISTS subqueries.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT * FROM t WHERE EXISTS(SELECT * FROM mv WHERE t.a < mv.a) AND EXISTS(SELECT * FROM mv WHERE t.b > mv.b)
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented
| Filter (true AND true)

%3 = Let l2 =
| Get %2 (l1)
| Distinct group=(#0)

%4 =
| Get materialize.public.mv (u5)

%5 =
| Join %3 %4
| | implementation = Unimplemented
| Filter (#0 < #1)
| Distinct group=(#0)

%6 =
| Constant (true)

%7 = Let l3 =
| Join %5 %6
| | implementation = Unimplemented

%8 =
| Get %7 (l3)
| Distinct group=(#0)
| Negate

%9 =
| Get %3 (l2)
| Distinct group=(#0)

%10 =
| Union %8 %9

%11 =
| Join %10 %3 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)

%12 =
| Constant (false)

%13 =
| Join %11 %12
| | implementation = Unimplemented

%14 =
| Union %7 %13

%15 = Let l4 =
| Join %2 %14 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1, #3)
| Filter #2
| Project (#0, #1)

%16 = Let l5 =
| Get %15 (l4)
| Distinct group=(#1)

%17 =
| Get materialize.public.mv (u5)

%18 =
| Join %16 %17
| | implementation = Unimplemented
| Filter (#0 > #2)
| Distinct group=(#0)

%19 =
| Constant (true)

%20 = Let l6 =
| Join %18 %19
| | implementation = Unimplemented

%21 =
| Get %20 (l6)
| Distinct group=(#0)
| Negate

%22 =
| Get %16 (l5)
| Distinct group=(#0)

%23 =
| Union %21 %22

%24 =
| Join %23 %16 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)

%25 =
| Constant (false)

%26 =
| Join %24 %25
| | implementation = Unimplemented

%27 =
| Union %20 %26

%28 =
| Join %15 %27 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #1, #3)
| Filter #2
| Project (#0, #1)

EOF

# Test SELECT subqueries.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT (SELECT v.a FROM v WHERE v.b = t.b LIMIT 1), (SELECT mv.a FROM mv WHERE mv.b = t.b LIMIT 1) FROM t
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 = Let l2 =
| Get %2 (l1)
| Distinct group=(#0, #1)

%4 = Let l3 =
| Get %3 (l2)
| Distinct group=(#1)

%5 =
| Get materialize.public.v (u3)

%6 = Let l4 =
| Join %4 %5
| | implementation = Unimplemented
| Filter (#2 = #0)
| TopK group=(#0) order=() limit=1 offset=0
| Project (#0, #1)

%7 =
| Get %6 (l4)
| Reduce group=(#0)
| | agg count(true)
| Filter (#1 > 1)
| Project (#0)
| Map (err: more than one record produced in subquery)

%8 = Let l5 =
| Union %6 %7

%9 =
| Get %8 (l5)
| Distinct group=(#0)
| Negate

%10 =
| Get %4 (l3)
| Distinct group=(#0)

%11 =
| Union %9 %10

%12 =
| Join %11 %4 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)

%13 =
| Constant (null)

%14 =
| Join %12 %13
| | implementation = Unimplemented

%15 =
| Union %8 %14

%16 =
| Join %3 %15 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #1, #3)

%17 = Let l6 =
| Get %2 (l1)
| Distinct group=(#0, #1)

%18 = Let l7 =
| Get %17 (l6)
| Distinct group=(#1)

%19 =
| Get materialize.public.mv (u5)

%20 = Let l8 =
| Join %18 %19
| | implementation = Unimplemented
| Filter (#2 = #0)
| TopK group=(#0) order=() limit=1 offset=0
| Project (#0, #1)

%21 =
| Get %20 (l8)
| Reduce group=(#0)
| | agg count(true)
| Filter (#1 > 1)
| Project (#0)
| Map (err: more than one record produced in subquery)

%22 = Let l9 =
| Union %20 %21

%23 =
| Get %22 (l9)
| Distinct group=(#0)
| Negate

%24 =
| Get %18 (l7)
| Distinct group=(#0)

%25 =
| Union %23 %24

%26 =
| Join %25 %18 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)

%27 =
| Constant (null)

%28 =
| Join %26 %27
| | implementation = Unimplemented

%29 =
| Union %22 %28

%30 =
| Join %17 %29 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #1, #3)

%31 =
| Join %2 %16 %30 (= #0 #2 #5) (= #1 #3 #6)
| | implementation = Unimplemented
| Map #4
| Map #7
| Project (#0, #1, #8, #9)
| Project (#2, #3)

EOF

# Test CrossJoin derived from a comma join without a predicate.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT t1.a, t2.a FROM t as t1, t as t2
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get materialize.public.t (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#3)
| Filter true

%6 =
| Get %5 (l3)
| Project (#0, #2)

EOF

# Test CrossJoin derived from an INNER JOIN with a trivial ON clause.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT t1.a, t2.a FROM t as t1 INNER JOIN t as t2 ON true
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get materialize.public.t (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#3)
| Filter true

%6 =
| Get %5 (l3)
| Project (#0, #2)

EOF

# Test InnerJoin (comma syntax).
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT t1.a, t2.a
FROM
  t as t1,
  t as t2,
  t as t3
WHERE t1.b = t2.b AND t2.b = t3.b
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get materialize.public.t (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#3)
| Filter true

%6 = Let l4 =
| Get %5 (l3)

%7 =
| Get materialize.public.t (u1)

%8 = Let l5 =
| Join %0 %7
| | implementation = Unimplemented

%9 = Let l6 =
| Join %6 %8
| | implementation = Unimplemented
| Project (#0..=#5)
| Filter true

%10 =
| Get %9 (l6)
| Filter ((#1 = #3) AND (#3 = #5))
| Project (#0, #2)

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT t1.a, t2.a
FROM t as t1
INNER JOIN t as t2 ON t1.b = t2.b
INNER JOIN t as t3 ON t2.b = t3.b
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get materialize.public.t (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#3)
| Filter (#1 = #3)

%6 = Let l4 =
| Get %5 (l3)

%7 =
| Get materialize.public.t (u1)

%8 = Let l5 =
| Join %0 %7
| | implementation = Unimplemented

%9 = Let l6 =
| Join %6 %8
| | implementation = Unimplemented
| Project (#0..=#5)
| Filter (#3 = #5)

%10 =
| Get %9 (l6)
| Project (#0, #2)

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT t1.a, t2.a
FROM t as t1
LEFT JOIN t as t2 ON t1.b = t2.b
RIGHT JOIN t as t3 ON t2.b = t3.b
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get materialize.public.t (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#3)
| Filter (#1 = #3)

%6 = Let l4 =
| Get %5 (l3)
| Project (#1)
| Distinct group=(#0)

%7 =
| Join %2 %6 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #1)
| Negate

%8 =
| Union %7 %2
| Map null, null

%9 = Let l5 =
| Union %8 %5

%10 =
| Get materialize.public.t (u1)

%11 = Let l6 =
| Join %0 %10
| | implementation = Unimplemented

%12 = Let l7 =
| Join %9 %11
| | implementation = Unimplemented
| Project (#0..=#5)
| Filter (#3 = #5)

%13 = Let l8 =
| Get %12 (l7)
| Project (#3)
| Distinct group=(#0)

%14 =
| Join %11 %13 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #1)
| Negate

%15 =
| Union %14 %11
| Map null, null, null, null
| Project (#2..=#5, #0, #1)

%16 =
| Union %15 %12
| Project (#0, #2)

EOF

# Test a single CTE.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
WITH x AS (SELECT t.a * t.b as v from t) SELECT a.v + b.v FROM x as a, x as b
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 = Let l2 =
| Get %2 (l1)
| Map (#0 * #1)
| Project (#0..=#2)
| Project (#2)

%4 = Let l3 =
| Join %3 %3
| | implementation = Unimplemented
| Project (#0, #1)
| Filter true

%5 = Let l4 =
| Get %4 (l3)

%6 =
| Get %5 (l4)
| Map (#0 + #1)
| Project (#0..=#2)
| Project (#2)

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up through
# the join because the local l0 is correlated against the lhs of the enclosing join.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r2 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r2 WHERE r2.m != r1.a
  ) as r3
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r4 WHERE r4.m != r1.a OR (r4.m IS NOT NULL AND r1.a IS NULL)
  ) as r5;
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 = Let l2 =
| Get %2 (l1)
| Distinct group=(#0)

%4 =
| Get materialize.public.t (u1)

%5 = Let l3 =
| Join %3 %4
| | implementation = Unimplemented
| Reduce group=(#0)
| | agg max((#0 * #1))

%6 =
| Get %5 (l3)
| Distinct group=(#0)
| Negate

%7 =
| Get %3 (l2)
| Distinct group=(#0)

%8 =
| Union %6 %7

%9 =
| Join %8 %3 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)

%10 =
| Constant (null)

%11 =
| Join %9 %10
| | implementation = Unimplemented

%12 = Let l4 =
| Union %5 %11

%13 =
| Get %12 (l4)
| Filter (#1 != #0)

%14 = Let l5 =
| Join %2 %13 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1, #3)
| Filter true

%15 = Let l6 =
| Get %14 (l5)
| Distinct group=(#0)

%16 =
| Get materialize.public.t (u1)

%17 = Let l7 =
| Join %15 %16
| | implementation = Unimplemented
| Reduce group=(#0)
| | agg max((#0 * #1))

%18 =
| Get %17 (l7)
| Distinct group=(#0)
| Negate

%19 =
| Get %15 (l6)
| Distinct group=(#0)

%20 =
| Union %18 %19

%21 =
| Join %20 %15 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)

%22 =
| Constant (null)

%23 =
| Join %21 %22
| | implementation = Unimplemented

%24 = Let l8 =
| Union %17 %23

%25 =
| Get %24 (l8)
| Filter ((#1 != #0) OR ((#1) IS NOT NULL AND (#0) IS NULL))

%26 =
| Join %14 %25 (= #0 #3)
| | implementation = Unimplemented
| Project (#0..=#2, #4)
| Filter true

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up
# through the join because the local l0 is correlated against the lhs of
# the enclosing join.
query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT *
    FROM
      r4
      CROSS JOIN LATERAL (
        WITH r2 as (
          SELECT MAX(r1.a * t.a) AS m FROM t
        )
        SELECT * FROM r2 WHERE r1.a = r4.m AND r2.m > 5
      ) as r3
    WHERE a != r1.a
  ) as r5;
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.t (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 = Let l2 =
| Get %2 (l1)
| Distinct group=(#0)

%4 =
| Get materialize.public.t (u1)

%5 = Let l3 =
| Join %3 %4
| | implementation = Unimplemented
| Reduce group=(#0)
| | agg max((#0 * #1))

%6 =
| Get %5 (l3)
| Distinct group=(#0)
| Negate

%7 =
| Get %3 (l2)
| Distinct group=(#0)

%8 =
| Union %6 %7

%9 =
| Join %8 %3 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)

%10 =
| Constant (null)

%11 =
| Join %9 %10
| | implementation = Unimplemented

%12 = Let l4 =
| Union %5 %11

%13 = Let l5 =
| Get %12 (l4)
| Distinct group=(#1, #0)

%14 =
| Get materialize.public.t (u1)

%15 = Let l6 =
| Join %13 %14
| | implementation = Unimplemented
| Reduce group=(#0, #1)
| | agg max((#1 * #2))

%16 =
| Get %15 (l6)
| Distinct group=(#0, #1)
| Negate

%17 =
| Get %13 (l5)
| Distinct group=(#0, #1)

%18 =
| Union %16 %17

%19 =
| Join %18 %13 (= #0 #2) (= #1 #3)
| | implementation = Unimplemented
| Project (#0, #1)

%20 =
| Constant (null)

%21 =
| Join %19 %20
| | implementation = Unimplemented

%22 = Let l7 =
| Union %15 %21

%23 =
| Get %22 (l7)
| Filter ((#1 = #0) AND (#2 > 5))

%24 =
| Join %12 %23 (= #1 #2) (= #0 #3)
| | implementation = Unimplemented
| Project (#0, #1, #4)
| Filter true
| Filter (#0 != #0)

%25 =
| Join %2 %24 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1, #3, #4)
| Filter true

EOF
