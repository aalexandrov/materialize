# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t (
  a int,
  b int
)

statement ok
CREATE VIEW ov AS SELECT * FROM t ORDER BY b asc, a desc LIMIT 5

statement ok
CREATE VIEW v AS
SELECT * FROM t WHERE a IS NOT NULL

statement ok
CREATE DEFAULT INDEX ON v

statement ok
CREATE MATERIALIZED VIEW mv AS
SELECT * FROM t WHERE a IS NOT NULL

mode cockroach

# Test basic linear chains.
query T multiline
EXPLAIN RAW PLAN FOR
SELECT a + 1, b, 4 FROM mv WHERE a > 0
----
%0 =
| Get materialize.public.mv (u5)
| Filter (#0 > 0)
| Map (#0 + 1), 4
| Project (#2, #1, #3)

EOF

# Test table functions (CallTable).
query T multiline
EXPLAIN RAW PLAN FOR
SELECT * FROM generate_series(1, 7)
----
%0 =
| CallTable generate_series(1, 7, 1)

EOF

# Test virtual syntax (EXCEPT).
query T multiline
EXPLAIN RAW PLAN FOR
SELECT a FROM t EXCEPT SELECT b FROM mv
----
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Map #0
| Project (#1)
| Distinct

%1 =
| Get materialize.public.mv (u5)
| Project (#1)
| Map #0
| Project (#1)
| Distinct
| Negate

%2 =
| Union %0 %1
| Threshold

EOF

# Test virtual syntax (EXCEPT ALL).
query T multiline
EXPLAIN RAW PLAN FOR
SELECT a FROM t EXCEPT ALL SELECT b FROM mv
----
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Map #0
| Project (#1)

%1 =
| Get materialize.public.mv (u5)
| Project (#1)
| Map #0
| Project (#1)
| Negate

%2 =
| Union %0 %1
| Threshold

EOF

# Test TopK.
query T multiline
EXPLAIN RAW PLAN FOR
VIEW ov
----
%0 =
| Get materialize.public.t (u1)
| TopK group=() order=(#1 asc nulls_last, #0 desc nulls_first) limit=5 offset=0
| Project (#0, #1)

EOF

# Test Finish.
query T multiline
EXPLAIN RAW PLAN FOR
SELECT * FROM t ORDER BY b asc, a desc LIMIT 5
----
%0 =
| Get materialize.public.t (u1)

Finish order_by=(#1 asc nulls_last, #0 desc nulls_first) limit=5 offset=0 project=(#0, #1)

EOF

# Test Reduce (global).
query T multiline
EXPLAIN RAW PLAN FOR
SELECT abs(min(a) - max(a)) FROM t
----
%0 =
| Get materialize.public.t (u1)
| Reduce group=() min(#0) max(#0)
| Map abs((#0 - #1))
| Project (#2)

EOF

# Test Reduce (local).
query T multiline
EXPLAIN RAW PLAN FOR
SELECT abs(min(a) - max(a)) FROM t GROUP BY b
----
%0 =
| Get materialize.public.t (u1)
| Map #1
| Reduce group=(2) min(#0) max(#0)
| Map abs((#1 - #2))
| Project (#3)

EOF

# Test EXISTS subqueries.
query T multiline
EXPLAIN RAW PLAN FOR
SELECT * FROM t WHERE EXISTS(SELECT * FROM mv WHERE t.a < mv.a) AND EXISTS(SELECT * FROM mv WHERE t.b > mv.b)
----
%0 =
| Get materialize.public.t (u1)
| Filter (exists(%1) AND exists(%2))
| |
| | %1 =
| | | Get materialize.public.mv (u5)
| | | Filter (#^0 < #0)
| |
| |
| | %2 =
| | | Get materialize.public.mv (u5)
| | | Filter (#^1 > #1)
| |

EOF

# Test SELECT subqueries.
query T multiline
EXPLAIN RAW PLAN FOR
SELECT (SELECT v.a FROM v WHERE v.b = t.b LIMIT 1), (SELECT mv.a FROM mv WHERE mv.b = t.b LIMIT 1) FROM t
----
%0 =
| Get materialize.public.t (u1)
| Map select(%1), select(%2)
| |
| | %1 =
| | | Get materialize.public.v (u3)
| | | Filter (#1 = #^1)
| | | TopK group=() order=() limit=1 offset=0
| | | Project (#0)
| |
| |
| | %2 =
| | | Get materialize.public.mv (u5)
| | | Filter (#1 = #^1)
| | | TopK group=() order=() limit=1 offset=0
| | | Project (#0)
| |
| Project (#2, #3)

EOF

# Test CrossJoin derived from a comma join without a predicate.
query T multiline
EXPLAIN RAW PLAN FOR
SELECT t1.a, t2.a FROM t as t1, t as t2
----
%0 =
| Get materialize.public.t (u1)

%1 =
| Get materialize.public.t (u1)

%2 =
| InnerJoin %0 %1 on true
| Project (#0, #2)

EOF

# Test CrossJoin derived from an INNER JOIN with a trivial ON clause.
query T multiline
EXPLAIN RAW PLAN FOR
SELECT t1.a, t2.a FROM t as t1 INNER JOIN t as t2 ON true
----
%0 =
| Get materialize.public.t (u1)

%1 =
| Get materialize.public.t (u1)

%2 =
| InnerJoin %0 %1 on true
| Project (#0, #2)

EOF

# Test InnerJoin (comma syntax).
query T multiline
EXPLAIN RAW PLAN FOR
SELECT t1.a, t2.a
FROM
  t as t1,
  t as t2,
  t as t3
WHERE t1.b = t2.b AND t2.b = t3.b
----
%0 =
| Get materialize.public.t (u1)

%1 =
| Get materialize.public.t (u1)

%2 =
| InnerJoin %0 %1 on true

%3 =
| Get materialize.public.t (u1)

%4 =
| InnerJoin %2 %3 on true
| Filter ((#1 = #3) AND (#3 = #5))
| Project (#0, #2)

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN RAW PLAN FOR
SELECT t1.a, t2.a
FROM t as t1
INNER JOIN t as t2 ON t1.b = t2.b
INNER JOIN t as t3 ON t2.b = t3.b
----
%0 =
| Get materialize.public.t (u1)

%1 =
| Get materialize.public.t (u1)

%2 =
| InnerJoin %0 %1 on (#1 = #3)

%3 =
| Get materialize.public.t (u1)

%4 =
| InnerJoin %2 %3 on (#3 = #5)
| Project (#0, #2)

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN RAW PLAN FOR
SELECT t1.a, t2.a
FROM t as t1
LEFT JOIN t as t2 ON t1.b = t2.b
RIGHT JOIN t as t3 ON t2.b = t3.b
----
%0 =
| Get materialize.public.t (u1)

%1 =
| Get materialize.public.t (u1)

%2 =
| LeftOuterJoin %0 %1 on (#1 = #3)

%3 =
| Get materialize.public.t (u1)

%4 =
| RightOuterJoin %2 %3 on (#3 = #5)
| Project (#0, #2)

EOF

# Test a single CTE.
query T multiline
EXPLAIN RAW PLAN FOR
WITH x AS (SELECT t.a * t.b as v from t) SELECT x.v + 5 FROM x
----
%0 = Let x (l0) =
| Get materialize.public.t (u1)
| Map (#0 * #1)
| Project (#2)

%1 =
| Get x (l0) (%0)
| Map (#0 + 5)
| Project (#1)

EOF

# Test multiple CTEs: directly nested 'Let' variants are rendered in a flattened way.
query T multiline
EXPLAIN RAW PLAN FOR
WITH A AS (SELECT 1 AS a), B as (SELECT a as b FROM A WHERE a > 0) SELECT * FROM A, B;
----
%0 = Let a (l0) =
| Constant ()
| Map 1

%1 = Let b (l1) =
| Get a (l0) (%0)
| Filter (#0 > 0)

%2 =
| InnerJoin %0 %1 on true

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up through
# the join because the local l0 is correlated against the lhs of the enclosing join.
query T multiline
EXPLAIN RAW PLAN FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r2 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r2 WHERE r2.m != r1.a
  ) as r3
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r4 WHERE r4.m != r1.a OR (r4.m IS NOT NULL AND r1.a IS NULL)
  ) as r5;
----
%0 =
| Get materialize.public.t (u1)

%1 = Let r2 (l0) =
| Get materialize.public.t (u1)
| Reduce group=() max((#^0 * #0))

%2 =
| Get r4 (l0) (%4)
| Filter (#0 != #^0)

%3 =
| InnerJoin %0 %2 on true

%4 = Let r4 (l0) =
| Get materialize.public.t (u1)
| Reduce group=() max((#^0 * #0))

%5 =
| Get r4 (l0) (%4)
| Filter ((#0 != #^0) OR ((#0) IS NOT NULL AND (#^0) IS NULL))

%6 =
| InnerJoin %3 %5 on true

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up
# through the join because the local l0 is correlated against the lhs of
# the enclosing join.
query T multiline
EXPLAIN RAW PLAN FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT *
    FROM
      r4
      CROSS JOIN LATERAL (
        WITH r2 as (
          SELECT MAX(r1.a * t.a) AS m FROM t
        )
        SELECT * FROM r2 WHERE r1.a = r4.m AND r2.m > 5
      ) as r3
    WHERE a != r1.a
  ) as r5;
----
%0 =
| Get materialize.public.t (u1)

%1 = Let r4 (l0) =
| Get materialize.public.t (u1)
| Reduce group=() max((#^0 * #0))

%2 = Let r2 (l1) =
| Get materialize.public.t (u1)
| Reduce group=() max((#^^0 * #0))

%3 =
| Get r2 (l1) (%2)
| Filter ((#^^0 = #^0) AND (#0 > 5))

%4 =
| InnerJoin %1 %3 on true
| Filter (#^0 != #^0)

%5 =
| InnerJoin %0 %4 on true

EOF
